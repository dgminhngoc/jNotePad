/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jnotepad;

import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author ngoc1414
 */
public class NotepadFrame extends javax.swing.JFrame 
{  
    private boolean changed = false;// if user change text in the text are, this variable will be set true 
    
    public int charCount = 0; 
    private int undoCount = 0; // amount of undo time 
    
    protected ArrayList<String> list; // stack for saving context
    /* when the user choose undo, the current context needed pushed to stack 
     * so we need two variables needSave and needSave2 for this case
     */
    private boolean needSave = true;
    private int needSave2;//
    
    // current setting for language and font
    private int languageSelected;
    private int fontSelected;
    private int fontSizeSelected;
    
    private int fontSizeZoom = 0;
    
    private File currentFile;
    /**
     * Creates new form NotepadFrame
     */
    public NotepadFrame() 
    {
        initComponents();
        
        list = new ArrayList<String>();
        list.add("");
        
        loadPreference();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem_copy = new javax.swing.JMenuItem();
        jMenuItem_paste = new javax.swing.JMenuItem();
        jMenuItem_cut = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_typingArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_file = new javax.swing.JMenu();
        jMenuItem_new = new javax.swing.JMenuItem();
        jMenuItem_open = new javax.swing.JMenuItem();
        jMenuItem_save = new javax.swing.JMenuItem();
        jMenuItem_saveAs = new javax.swing.JMenuItem();
        jMenuItem_exit = new javax.swing.JMenuItem();
        jMenu_edit = new javax.swing.JMenu();
        jMenuItem_undo = new javax.swing.JMenuItem();
        jMenuItem_redo = new javax.swing.JMenuItem();
        jMenuItem_zoomOut = new javax.swing.JMenuItem();
        jMenuItem_zoomIn = new javax.swing.JMenuItem();
        jMenuItem_preference = new javax.swing.JMenuItem();
        jMenu_help = new javax.swing.JMenu();
        jMenuItem_update = new javax.swing.JMenuItem();
        jMenuItem_about = new javax.swing.JMenuItem();

        jMenuItem_copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_copy.setText("Copy");
        jMenuItem_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_copyActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem_copy);

        jMenuItem_paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_paste.setText("Paste");
        jMenuItem_paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_pasteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem_paste);

        jMenuItem_cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_cut.setText("Cut");
        jMenuItem_cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_cutActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem_cut);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JNotepad");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextArea_typingArea.setColumns(20);
        jTextArea_typingArea.setLineWrap(true);
        jTextArea_typingArea.setRows(5);
        jTextArea_typingArea.setTabSize(3);
        jTextArea_typingArea.setWrapStyleWord(true);
        jTextArea_typingArea.setComponentPopupMenu(jPopupMenu1);
        jTextArea_typingArea.setDragEnabled(true);
        jTextArea_typingArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea_typingAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea_typingArea);

        jMenu_file.setMnemonic('F');
        jMenu_file.setText("File");

        jMenuItem_new.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_new.setMnemonic('N');
        jMenuItem_new.setText("New");
        jMenuItem_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_newActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_new);

        jMenuItem_open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_open.setMnemonic('O');
        jMenuItem_open.setText("Open");
        jMenuItem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_openActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_open);

        jMenuItem_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_save.setMnemonic('S');
        jMenuItem_save.setText("Save");
        jMenuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_saveActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_save);

        jMenuItem_saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_saveAs.setText("Save as...");
        jMenuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_saveAsActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_saveAs);

        jMenuItem_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_exit.setMnemonic('E');
        jMenuItem_exit.setText("Exit");
        jMenuItem_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_exitActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem_exit);

        jMenuBar1.add(jMenu_file);

        jMenu_edit.setMnemonic('E');
        jMenu_edit.setText("Edit");

        jMenuItem_undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_undo.setText("Undo");
        jMenuItem_undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_undoActionPerformed(evt);
            }
        });
        jMenu_edit.add(jMenuItem_undo);

        jMenuItem_redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_redo.setText("Redo");
        jMenuItem_redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_redoActionPerformed(evt);
            }
        });
        jMenu_edit.add(jMenuItem_redo);

        jMenuItem_zoomOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_zoomOut.setText("Zoom in");
        jMenuItem_zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_zoomOutActionPerformed(evt);
            }
        });
        jMenu_edit.add(jMenuItem_zoomOut);

        jMenuItem_zoomIn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_zoomIn.setText("Zoom out");
        jMenuItem_zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_zoomInActionPerformed(evt);
            }
        });
        jMenu_edit.add(jMenuItem_zoomIn);

        jMenuItem_preference.setText("Preference");
        jMenuItem_preference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_preferenceActionPerformed(evt);
            }
        });
        jMenu_edit.add(jMenuItem_preference);

        jMenuBar1.add(jMenu_edit);

        jMenu_help.setMnemonic('H');
        jMenu_help.setText("Help");

        jMenuItem_update.setText("Check for update");
        jMenuItem_update.setEnabled(false);
        jMenu_help.add(jMenuItem_update);

        jMenuItem_about.setMnemonic('A');
        jMenuItem_about.setText("About");
        jMenuItem_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_aboutActionPerformed(evt);
            }
        });
        jMenu_help.add(jMenuItem_about);

        jMenuBar1.add(jMenu_help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_newActionPerformed
        if( changed == true )
        {
            int result;
            
            if( languageSelected == 0)
                result = JOptionPane.showConfirmDialog(null, "Do you want to save this file ?", "", JOptionPane.YES_NO_OPTION);
            else 
                result = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu file này chứ ?", "", JOptionPane.YES_NO_OPTION);
            
            if( result == JOptionPane.YES_OPTION)
            {
                saveFile();
                jTextArea_typingArea.setText("");
                resetCoputing();
            }
            else  if ( result == JOptionPane.NO_OPTION)
            {
                jTextArea_typingArea.setText("");
                resetCoputing();
            }     
            else
            {
                //do nothing
            }
        }       
    }//GEN-LAST:event_jMenuItem_newActionPerformed

    private void jMenuItem_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_aboutActionPerformed
        AboutForm aboutForm = new AboutForm(languageSelected);
        aboutForm.setVisible(true);
    }//GEN-LAST:event_jMenuItem_aboutActionPerformed

    private void jMenuItem_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_openActionPerformed
        resetCoputing();
        
        if( changed == true )
        {
            int result;
            
            if( languageSelected == 0)
                result = JOptionPane.showConfirmDialog(null, "Do you want to save this file ?", "", JOptionPane.YES_NO_OPTION);
            else
                result = JOptionPane.showConfirmDialog(null, "Bạn muốn lưu file này chứ ?", "", JOptionPane.YES_NO_OPTION);
            
            if( result == JOptionPane.YES_OPTION)
            {
                      openFile();
            }
        }
        else
        {
            openFile();
        }
        
        
        
    }//GEN-LAST:event_jMenuItem_openActionPerformed

    private void jMenuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_saveActionPerformed
        if( charCount >= 0)
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        saveFile(); 
    }//GEN-LAST:event_jMenuItem_saveActionPerformed

    private void jMenuItem_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_exitActionPerformed
        if( changed == true )
        {
           int result = JOptionPane.showConfirmDialog(null, "Do you want to save this file ?", "", JOptionPane.YES_NO_OPTION);
           
           if( result == JOptionPane.YES_OPTION)
           {
               saveFile();
           }
           else if( result == JOptionPane.NO_OPTION )
               System.exit(0);
           else
           {   
               //do nothing
           }
        }// if text area has been changed
        else
            System.exit(0);      
    }//GEN-LAST:event_jMenuItem_exitActionPerformed

    private void jTextArea_typingAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea_typingAreaKeyTyped
        changed = true;
        
        charCount ++;
        
        if( charCount == 10 )
        {
            list.add(jTextArea_typingArea.getText().toString());
            charCount = 0;
        }
    }//GEN-LAST:event_jTextArea_typingAreaKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       if( changed == true )
       {
           int result = JOptionPane.showConfirmDialog(null, "Do you want to save this file ?", "", JOptionPane.YES_NO_OPTION);
           if( result == JOptionPane.YES_OPTION)
           {
               saveFile();
           }
       }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem_undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_undoActionPerformed
        if( charCount >= 0)
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        if( undoCount < (list.size() -1) )
        {           
            if( undoCount == 0 && charCount > 0 && needSave == true )
            {    
                list.add(jTextArea_typingArea.getText().toString());
                needSave = false;
                needSave2 = charCount;
            }
            
            undoCount += 1;
            
            jTextArea_typingArea.setText( (String)list.get( list.size() - undoCount -1  ) );
        }      
    }//GEN-LAST:event_jMenuItem_undoActionPerformed

    private void jMenuItem_redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_redoActionPerformed
        if( charCount >= 0 ) 
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        if( undoCount > 0)
        {
            undoCount -= 1;
            
            jTextArea_typingArea.setText( (String)list.get( list.size() - undoCount -1) );
        }
        
        if( undoCount == 0 && charCount != needSave2 )
            needSave = true;     
    }//GEN-LAST:event_jMenuItem_redoActionPerformed

    private void jMenuItem_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_copyActionPerformed
        if( charCount >= 0 ) 
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        jTextArea_typingArea.copy();
    }//GEN-LAST:event_jMenuItem_copyActionPerformed

    private void jMenuItem_pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_pasteActionPerformed
        if( charCount >= 0 ) 
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        jTextArea_typingArea.paste();            
    }//GEN-LAST:event_jMenuItem_pasteActionPerformed

    private void jMenuItem_preferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_preferenceActionPerformed
        PreferenceForm preferenceForm = new PreferenceForm(languageSelected, fontSelected, fontSizeSelected, this);
        preferenceForm.setVisible(true);
    }//GEN-LAST:event_jMenuItem_preferenceActionPerformed

    private void jMenuItem_cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_cutActionPerformed
        if( charCount >= 0 ) 
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
                
        changed = false;
        
        jTextArea_typingArea.cut();  
    }//GEN-LAST:event_jMenuItem_cutActionPerformed

    private void jMenuItem_zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_zoomOutActionPerformed
         if( charCount >= 0 ) 
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        fontSizeZoom += 3;
        updateDisplay(languageSelected, fontSelected, fontSizeSelected, false);       
    }//GEN-LAST:event_jMenuItem_zoomOutActionPerformed

    private void jMenuItem_zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_zoomInActionPerformed
        if( charCount >= 0 ) 
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        fontSizeZoom -= 3;
        updateDisplay(languageSelected, fontSelected, fontSizeSelected, false);
    }//GEN-LAST:event_jMenuItem_zoomInActionPerformed

    private void jMenuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_saveAsActionPerformed
        if( charCount >= 0 ) 
            charCount --;
        
        if( charCount ==  0 && list.size() > 1)
            list.remove(list.size()-1);
        
        changed = false;
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save as");
        
        int choose = fileChooser.showSaveDialog(null);
        
        File file = fileChooser.getSelectedFile();
        if( file != null ) 
            writeFile(file);
    }//GEN-LAST:event_jMenuItem_saveAsActionPerformed
    
    
    
    private void resetCoputing()
    {
        charCount = 0;
        undoCount = 0;
        changed = false;
        
        currentFile = null;
        
        list.clear();
        list.add(jTextArea_typingArea.getText().toString());
    }
    
    private void openFile()
    {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open file");
        fileChooser.showOpenDialog(null);
        
        File file = fileChooser.getSelectedFile();
        if( file != null )
        {
            readFile(file);
            currentFile = file;
            resetCoputing();
        }      
    }
    
    private void saveFile()
    {
        if( currentFile != null )
        {
            writeFile(currentFile);
            changed = false;
        }
        else
        {   
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Open file");
            fileChooser.showSaveDialog(null);

            File file = fileChooser.getSelectedFile();
            currentFile = file;
            if( file != null )
            {
                writeFile(file);
                currentFile = file;
                changed = false;
            }
        }   
    }
    
    private void readFile(File file)
    {
        try
        {
            currentFile = file;
            
            jTextArea_typingArea.setText("");
            
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
            String line;
            
            while( (line = bufferedReader.readLine()) != null )
            {
                jTextArea_typingArea.append(line+"\n");
            }
            
            bufferedReader.close();         
        }
        catch( IOException ioE )
        {
            
        }
    }
    
    private void writeFile(File file)
    {
        try
        {                   
            file.createNewFile();
            
            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8"));
            
            String data = jTextArea_typingArea.getText();
            bufferedWriter.write(data);
            
            bufferedWriter.close();              
        }
        catch( IOException ioE )
        {
            
        }
    }
    
    private void loadPreference() 
    {
        String notePadPath = NotepadFrame.class.getProtectionDomain().getCodeSource().getLocation().getPath();       
        File file1 = new File(notePadPath);
        String a = file1.getParent();
        File file = new File(a+"/NpConfig.conf");
        
        StringBuilder str = new StringBuilder();
        
        if( file.exists() )
        {       
            try 
            {
                FileReader fileReader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                
                while( (line = bufferedReader.readLine()) != null )
                {
                    str.append(line);
                }
                
                line = str.toString();
                String[] setting = line.split("   ");
                
                languageSelected = Integer.parseInt(setting[0]);
                fontSelected = Integer.parseInt(setting[1]);
                fontSizeSelected = Integer.parseInt(setting[2]);
                
                updateDisplay(languageSelected, fontSelected, fontSizeSelected, false);
                
                bufferedReader.close(); 
                fileReader.close();
            } 
            catch( Exception e){
                //do nothing
            }                 
       }//end if config file is exist
        else // if config file is not exist, create a new config file
        {
            try
            {
                file.createNewFile();
            
                FileWriter fileWriter = new FileWriter(file);
                BufferedWriter bufferedWrtier = new BufferedWriter(fileWriter);
            
                String data = "0   0   1";
                bufferedWrtier.write(data);
            
                bufferedWrtier.close();
                fileWriter.close();
            }
            catch( Exception e)
            {
                //do nothing
            }
        }
    }//end method loadPreference()
    
    public void updateDisplay( int language, int font, int fontSize, boolean isRestoreDefault )
    {
        languageSelected = language;
        fontSelected = font;
        fontSizeSelected =  fontSize; 
        
        if( language == 0 ) // language: english
        {
            languageSelected = 0;
            
            jMenu_file.setText("File");
            jMenu_edit.setText("Edit");
            jMenu_help.setText("Help");
                
            jMenuItem_new.setText("New");
            jMenuItem_open.setText("Open");
            jMenuItem_save.setText("Save");
            jMenuItem_saveAs.setText("Save as...");
            jMenuItem_exit.setText("Exit");
                
            jMenuItem_copy.setText("Copy");
            jMenuItem_paste.setText("Paste");
            jMenuItem_cut.setText("Cut");
                
            jMenuItem_undo.setText("Undo");
            jMenuItem_redo.setText("Redo");
            jMenuItem_zoomIn.setText("Zoom-in");
            jMenuItem_zoomOut.setText("Zoom-out");
            jMenuItem_preference.setText("Preference");
            
            jMenuItem_update.setText("Check for update");
            jMenuItem_about.setText("About");      
        }
        else // language: vietnamese
        {
            languageSelected = 1;
            
            jMenu_file.setText("Tệp");
            jMenu_edit.setText("Thay đổi");
            jMenu_help.setText("Trợ giúp");
                
            jMenuItem_new.setText("Tạo mới");
            jMenuItem_open.setText("Mở");
            jMenuItem_save.setText("Lưu");
            jMenuItem_saveAs.setText("Lưu thành");
            jMenuItem_exit.setText("Thoát");
                
            jMenuItem_copy.setText("Cóp");
            jMenuItem_paste.setText("Dán");
            jMenuItem_cut.setText("Chuyển");
                
            jMenuItem_undo.setText("Hoàn lại");
            jMenuItem_redo.setText("Tái hoàn lại");
            jMenuItem_zoomIn.setText("Phóng to");
            jMenuItem_zoomOut.setText("Thu nhỏ");
            jMenuItem_preference.setText("Tùy chọn");
            
            jMenuItem_update.setText("Kiểm tra cập nhật");
            jMenuItem_about.setText("Thông tin");             
        }
        
        if( isRestoreDefault )
            fontSizeZoom = 0;
        
        Font font1 = null;
        
        int size;
        if( fontSizeSelected == 0 )
            size = 14;
        else if (fontSelected == 1 )
            size = 18;
        else
            size = 22;
        
        if( font == 0)
            font1 = new Font(Font.SERIF, Font.TRUETYPE_FONT, size + fontSizeZoom);
        else if( font == 1 )
            font1 = new Font(Font.SANS_SERIF, Font.TRUETYPE_FONT, size + fontSizeZoom);
        else
            font1 = new Font(Font.MONOSPACED, Font.TRUETYPE_FONT, size + fontSizeZoom);
        
        jTextArea_typingArea.setFont(font1);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch( Exception e )
        {
            
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotepadFrame().setVisible(true);
            }
        });
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_about;
    private javax.swing.JMenuItem jMenuItem_copy;
    private javax.swing.JMenuItem jMenuItem_cut;
    private javax.swing.JMenuItem jMenuItem_exit;
    private javax.swing.JMenuItem jMenuItem_new;
    private javax.swing.JMenuItem jMenuItem_open;
    private javax.swing.JMenuItem jMenuItem_paste;
    private javax.swing.JMenuItem jMenuItem_preference;
    private javax.swing.JMenuItem jMenuItem_redo;
    private javax.swing.JMenuItem jMenuItem_save;
    private javax.swing.JMenuItem jMenuItem_saveAs;
    private javax.swing.JMenuItem jMenuItem_undo;
    private javax.swing.JMenuItem jMenuItem_update;
    private javax.swing.JMenuItem jMenuItem_zoomIn;
    private javax.swing.JMenuItem jMenuItem_zoomOut;
    private javax.swing.JMenu jMenu_edit;
    private javax.swing.JMenu jMenu_file;
    private javax.swing.JMenu jMenu_help;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea_typingArea;
    // End of variables declaration//GEN-END:variables
}
